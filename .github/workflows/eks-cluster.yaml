name: Create or Destroy EKS Cluster

on:
  workflow_dispatch:
    inputs:
      ACTION:
        description: "Choose Terraform action (apply or destroy)"
        required: true
        default: "apply"
        type: choice
        options:
          - apply
          - destroy

jobs:
  terraform:
    runs-on: ubuntu-latest

    env:
      TERRAFORM_DIR: terraform
      AWS_REGION: us-west-2
      TF_BUCKET: backup-config-terraform-tfstate-lucky
      TF_KEY: terraform/state.tfstate

    steps:
      # Step 1: Checkout the code repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Step 3: Set up Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      # Step 4: Initialize Terraform with S3 Backend
      - name: Initialize Terraform
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TF_BUCKET }}" \
            -backend-config="key=${{ env.TF_KEY }}" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -backend-config="secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"

      # Step 5: Apply or Destroy based on input
      - name: Execute Terraform Action
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: |
          if [ "${{ github.event.inputs.ACTION }}" == "apply" ]; then
            terraform plan -out=tfplan
            terraform apply -auto-approve tfplan
          elif [ "${{ github.event.inputs.ACTION }}" == "destroy" ]; then
            terraform state pull > state.tfstate
            terraform destroy -auto-approve
          else
            echo "Invalid ACTION input: ${{ github.event.inputs.ACTION }}"
            exit 1
          fi

      # Step 6: Post success message
      - name: Success Message
        if: success()
        run: echo "Terraform action ${{ github.event.inputs.ACTION }} completed successfully."

      # Step 7: Post failure message
      - name: Failure Message
        if: failure()
        run: echo "Terraform action ${{ github.event.inputs.ACTION }} failed. Please check logs."
